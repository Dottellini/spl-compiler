package de.thm.mni.compilerbau.phases._02_03_parser;

import java.util.List;
import java.util.LinkedList;
import java_cup.runtime.*;
import de.thm.mni.compilerbau.phases._01_scanner.Scanner;
import de.thm.mni.compilerbau.absyn.*;
import de.thm.mni.compilerbau.table.Identifier;
import de.thm.mni.compilerbau.utils.SplError;
import de.thm.mni.compilerbau.CommandLineOptions;

parser code {:
  public CommandLineOptions options = null;

  public void syntax_error(Symbol currentToken) {
    // Apparently there is a cup bug that causes expected_token_ids() to return incorrect results on first call
    // This is why this call is inserted.
    this.expected_token_ids();
    
    throw SplError.SyntaxError(new Position(currentToken.left, currentToken.right),
            this.symbl_name_from_id(currentToken.sym),
            this.expected_token_ids().stream().map(this::symbl_name_from_id).toList());
  }
  
  /**
   * @return An empty list. (Uses LinkedList)
   */
  public static <E> List<E> nil() {
      return new LinkedList<E>();
  }
  
  /**
   * Constructs a list from a head and a tail without modifying the tail (Uses LinkedList).
   * Use this as a helper if you don't want to deal with constructing lists manually.
   *
   * @param head The head of the list
   * @param tail The tail of the list
   * @return A list containing the head element and all elements of tail
   */
  public static <E> List<E> cons(E head, List<E> tail) {
    List<E> copy = new LinkedList(tail);
    copy.add(0, head);
    return copy;
  }
:}

/* Terminals/Tokens */
terminal LBRACK, RBRACK, LPAREN, RPAREN, LCURL, RCURL;         //Braces, parenthesis, brackets
terminal LT, LE, GT, GE, NE, EQ;                               //Comparison operators
terminal PLUS, MINUS, STAR, SLASH;                             //Arithmetic operators
terminal ASGN, COMMA, COLON, SEMIC;                            //Other delimiters
terminal TYPE, PROC, ARRAY, OF, REF, VAR, IF, ELSE, WHILE;     //Keywords

terminal String IDENT;    //Identifiers //WARNING changed from: terminal Identifier IDENT;
terminal Integer INTLIT;      //Integer literals

/* Non-terminals */
non terminal Program program;
non terminal List<GlobalDefinition> globalDefinitionsList;
non terminal GlobalDefinition globalDefinition;
non terminal TypeDefinition typeDec;
non terminal ArrayTypeExpression typeArrayDec;
non terminal ProcedureDefinition procDec;
non terminal List<ParameterDefinition> procParameterList, procParameterListOrEmpty;
non terminal ParameterDefinition procParameter;
non terminal List<Statement> procInstructionList;
non terminal AssignStatement varAssignment;
non terminal Variable varNameForMultiDimArray, varName;
non terminal Statement procInstruction;
non terminal List<VariableDefinition> varDecList;
non terminal VariableDefinition varDec;
non terminal Statement ifStatement, whileLoop, blockStatement, procCall;
non terminal List<Expression> procParameterCallListOrEmpty, procParameterCall;
non terminal BinaryExpression comparisonOperation;
non terminal BinaryExpression.Operator comparisonOperators;
non terminal Expression expression;
non terminal Expression punktCalculation, strichCalculation, negationParenCalc, parenCalculation, calculationValue;

precedence left LT, LE, GT, GE, EQ, NE;
precedence left PLUS, MINUS;
precedence left STAR, SLASH;
precedence right ASGN;

start with program;

program ::= globalDefinitionsList:list {:RESULT = new Program(new Position(listleft, listright), list);:};

globalDefinitionsList ::= globalDefinition:def globalDefinitionsList:list {: RESULT = cons(def, list); :}
                            | /* leer */ {:RESULT = nil();:};
globalDefinition ::= typeDec:typeDec {:RESULT = typeDec;:}| procDec:procDec {:RESULT = procDec;:};

typeDec ::= TYPE IDENT:name EQ:op typeArrayDec:type SEMIC {:RESULT = new TypeDefinition(new Position(opleft, opright), new Identifier(name), type);:}
                | TYPE IDENT:name EQ:op IDENT:type SEMIC {:RESULT = new TypeDefinition(new Position(opleft, opright), new Identifier(name), new NamedTypeExpression(new Position(typeleft, typeright), new Identifier(type)));:};

typeArrayDec ::= ARRAY LBRACK INTLIT:size RBRACK OF typeArrayDec:type {:RESULT = new ArrayTypeExpression(new Position(sizeleft, sizeright), size, type);:}
                | ARRAY LBRACK INTLIT:size RBRACK OF IDENT:type {:RESULT = new ArrayTypeExpression(new Position(sizeleft, sizeright), size, new NamedTypeExpression(new Position(typeleft, typeright), new Identifier(type)));:};

procDec ::= PROC IDENT:name LPAREN procParameterListOrEmpty:params RPAREN LCURL varDecList:vars procInstructionList:body RCURL {:RESULT = new ProcedureDefinition(new Position(nameleft, nameright), new Identifier(name), params, vars, body);:};

procParameterListOrEmpty ::= procParameterList:plist {:RESULT = plist;:}
                            | /* leer */ {:RESULT = nil();:}; //Man kann das nicht mit procParameterList verbinden, da man sonst (1, ) machen könnte, was nicht legal ist

procParameterList ::= procParameter:param {:RESULT = cons(param, new LinkedList<ParameterDefinition>());:}
                    | procParameter:param COMMA procParameterList:list {:RESULT = cons(param, list);:};

procParameter ::= IDENT:name COLON IDENT:type {:RESULT = new ParameterDefinition(new Position(nameleft, nameright), new Identifier(name), new NamedTypeExpression(new Position(typeleft, typeright), new Identifier(type)), false);:}
                    | REF IDENT:name COLON IDENT:type {:RESULT = new ParameterDefinition(new Position(nameleft, nameright), new Identifier(name), new NamedTypeExpression(new Position(typeleft, typeright), new Identifier(type)), true);:};

varDecList ::= varDec:var varDecList:list {:RESULT = cons(var, list);:}
                | /* leer */ {:RESULT = nil();:};
varDec ::= VAR IDENT:name COLON typeArrayDec:type SEMIC {:RESULT = new VariableDefinition(new Position(nameleft, nameright), new Identifier(name), type);:}
            | VAR IDENT:name COLON IDENT:type SEMIC {:RESULT = new VariableDefinition(new Position(nameleft, nameright), new Identifier(name), new NamedTypeExpression(new Position(typeleft, typeright), new Identifier(type)));:};

procInstructionList ::= procInstruction:instr procInstructionList:list {:RESULT = cons(instr, list);:}
                        | /* leer */ {:RESULT = nil();:};
procInstruction ::= varAssignment:var {:RESULT = var;:}
                    | ifStatement:ifS {:RESULT = ifS;:}
                    | whileLoop:whileS {:RESULT = whileS;:}
                    | blockStatement:block {:RESULT = block;:}
                    | procCall:proc {:RESULT = proc;:}
                    | SEMIC;

//Erstelle whileLoop, ifStatement, blockBody, varAssignment, procCall
varAssignment ::= varName:name ASGN expression:exp SEMIC {:RESULT = new AssignStatement(new Position(nameleft, nameright), name, exp);:};
varName ::= IDENT:name {:RESULT = new NamedVariable(new Position(nameleft, nameright), new Identifier(name));:}
            | varNameForMultiDimArray:array LBRACK expression:index RBRACK {:RESULT = new ArrayAccess(new Position(arrayleft, arrayright), array, index);:};
varNameForMultiDimArray ::= IDENT:name {:RESULT = new NamedVariable(new Position(nameleft, nameright), new Identifier(name));:}
                            | varNameForMultiDimArray:array LBRACK expression:index RBRACK {:RESULT = new ArrayAccess(new Position(arrayleft, arrayright), array, index);:}; //Wird benötigt für multi dimensionale Arrays

ifStatement ::= IF LPAREN comparisonOperation:cond RPAREN procInstruction:then ELSE procInstruction:elseSt {:RESULT = new IfStatement(new Position(condleft, condright), cond, then, elseSt);:}
                | IF LPAREN comparisonOperation:cond RPAREN procInstruction:then {:RESULT = new IfStatement(new Position(condleft, condright), cond, then, new EmptyStatement(new Position(condleft, condright)));:};

whileLoop ::= WHILE LPAREN comparisonOperation:cond RPAREN procInstruction:then {:RESULT = new WhileStatement(new Position(condleft, condright), cond, then);:};

blockStatement ::= LCURL procInstructionList:list RCURL {:RESULT = new CompoundStatement(new Position(listleft, listright), list);:};

procCall ::= IDENT:name LPAREN procParameterCallListOrEmpty:call RPAREN SEMIC {:RESULT = new CallStatement(new Position(nameleft, nameright), new Identifier(name), call);:};
procParameterCallListOrEmpty ::= procParameterCall:list {:RESULT = list;:}
                                | /* leer */ {:RESULT = nil();:};
procParameterCall ::= expression:exp {:RESULT = cons(exp, new LinkedList<Expression>());:}
                    | expression:exp COMMA procParameterCall:list {:RESULT = cons(exp, list);:};

comparisonOperation ::= expression:e1 comparisonOperators:op expression:e2 {:RESULT = new BinaryExpression(new Position(opleft, opright), op, e1, e2);:};
comparisonOperators ::= LT {:RESULT = BinaryExpression.Operator.LST;:}
                        | LE {:RESULT = BinaryExpression.Operator.LSE;:}
                        | EQ {:RESULT = BinaryExpression.Operator.EQU;:}
                        | NE {:RESULT = BinaryExpression.Operator.NEQ;:}
                        | GT {:RESULT = BinaryExpression.Operator.GRT;:}
                        | GE {:RESULT = BinaryExpression.Operator.GRE;:};

expression ::= strichCalculation:calc {:RESULT = calc;:};

strichCalculation ::= strichCalculation:s1 PLUS:op punktCalculation:s2 {: RESULT = new BinaryExpression(new Position(opleft, opright), BinaryExpression.Operator.ADD, s1, s2);:}
                    | strichCalculation:s1 MINUS:op punktCalculation:s2 {: RESULT = new BinaryExpression(new Position(opleft, opright), BinaryExpression.Operator.SUB, s1, s2);:}
                    | punktCalculation:p {:RESULT = p;:};

punktCalculation ::= punktCalculation:s1 STAR:op negationParenCalc:s2 {: RESULT = new BinaryExpression(new Position(opleft, opright), BinaryExpression.Operator.MUL, s1, s2);:}
                   | punktCalculation:s1 SLASH:op negationParenCalc:s2 {: RESULT = new BinaryExpression(new Position(opleft, opright), BinaryExpression.Operator.DIV, s1, s2);:}
                   | negationParenCalc:n {:RESULT = n;:};

negationParenCalc ::= MINUS:op parenCalculation:exp {: RESULT = new BinaryExpression(new Position(opleft, opright), BinaryExpression.Operator.SUB, new IntLiteral(new Position(expleft, expright), 0), exp);:}
                     | parenCalculation:p {:RESULT = p;:};

parenCalculation ::= LPAREN expression:exp RPAREN {:RESULT = exp;:}
                    | calculationValue:v {:RESULT = v;:};

calculationValue ::= varName:var {:RESULT = new VariableExpression(new Position(varleft, varright), var);:}
                    | INTLIT:lit {:RESULT = new IntLiteral(new Position(litleft, litright), lit);:};

